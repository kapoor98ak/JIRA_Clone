Resources:
  MySNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: MySNSNotificationTopic

  MySNSSubscription:
    Type: AWS::SNS::Subscription
    DependsOn: MySNSTopic
    Properties:
      Protocol: email
      # Endpoint: !Ref UserEmail
      Endpoint: "kapoor98.ak@gmail.com"
      TopicArn: !Ref MySNSTopic

  EmailSenderFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: 
      - MySNSTopic
      - MyDBInstance
    Properties:
      FunctionName: emailSenderLambdaFunction
      Handler: lambda_function.lambda_handler
      # LabRole ARN
      Role: arn:aws:iam::851725512559:role/LabRole
      Code:
        S3Bucket: my-lambda-code-bucket-1
        S3Key: lambda_function.py.zip
      Runtime: python3.8
      Timeout: 30
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref MySNSTopic
          RDSSecret_ARN: !Ref RDSSecret
          RDSInstance: !Ref MyDBInstance

  
  CreateIssueFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: 
      - MySNSTopic
      - MyDBInstance
    Properties:
      FunctionName: createIssueLambdaFunction
      Handler: lambda_function.lambda_handler
      # LabRole ARN
      Role: arn:aws:iam::851725512559:role/LabRole
      Code:
        S3Bucket: my-lambda-code-bucket-1
        S3Key: create_issue_lambda.zip
      Runtime: python3.8
      Timeout: 30
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref MySNSTopic
          RDSSecret_ARN: !Ref RDSSecret
          RDSInstance: !Ref MyDBInstance

  
  EditIssueFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: 
      - MySNSTopic
      - MyDBInstance
    Properties:
      FunctionName: editIssueLambdaFunction
      Handler: lambda_function.lambda_handler
      # LabRole ARN
      Role: arn:aws:iam::851725512559:role/LabRole
      Code:
        S3Bucket: my-lambda-code-bucket-1
        S3Key: edit_issue_lambda.zip
      Runtime: python3.8
      Timeout: 30
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref MySNSTopic
          RDSSecret_ARN: !Ref RDSSecret
          RDSInstance: !Ref MyDBInstance

  # This is working perfectly and I am able to connect to the RDS Database
  # mydbinstance-2107.cjs42euouytr.us-east-1.rds.amazonaws.com - I got this from the output section of Cloud Formation and then I also got the Username and Password from the Secret Manager      

# API Gateway Setup
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: JiraApi
      Description: API Gateway for JIRA Board
      # FailOnWarnings: true
      ApiKeySourceType: HEADER
      EndpointConfiguration:
        Types:
          - EDGE

  # First
  CreateIssueApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: create
      RestApiId: !Ref ApiGatewayRestApi

  CreateIssueApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref CreateIssueApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        IntegrationHttpMethod: POST
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateIssueFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200

  CreateIssueApiOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref CreateIssueApiResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: TRUE
            method.response.header.Access-Control-Allow-Methods: TRUE
            method.response.header.Access-Control-Allow-Origin: TRUE
# Edit 
  EditIssueApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: edit
      RestApiId: !Ref ApiGatewayRestApi

  EditIssueApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref EditIssueApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        IntegrationHttpMethod: POST
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EditIssueFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200

  EditIssueApiOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref EditIssueApiResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: TRUE
            method.response.header.Access-Control-Allow-Methods: TRUE
            method.response.header.Access-Control-Allow-Origin: TRUE
  
  LambdaPermissionForApiGatewayCreate:
    Type: AWS::Lambda::Permission
    DependsOn: 
      - CreateIssueFunction
    Properties:
      FunctionName: !Ref CreateIssueFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/create
  
  LambdaPermissionForApiGatewayEdit:
    Type: AWS::Lambda::Permission
    DependsOn: 
      - EditIssueFunction
    Properties:
      FunctionName: !Ref EditIssueFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/edit
  
  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: "application/json"
      RestApiId: !Ref ApiGatewayRestApi
      Schema: {}

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - CreateIssueApiMethod
      - CreateIssueApiOptionsMethod
      - EditIssueApiMethod
      - EditIssueApiOptionsMethod

    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      Description: "My API Deployment"
      StageName: "prod"

  RDSSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: MyRDSCredentials-final-1
      Description: RDS credentials will be stored in Secrets Manager
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        # SecretStringTemplate: '{"username": !Ref DBUsername}'
        GenerateStringKey: "password"
        # GenerateStringKey: !Ref DBUsername
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'

  MyDBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      GroupDescription: Allow inbound access from anywhere
      DBSecurityGroupIngress:
        - CIDRIP: 0.0.0.0/0
        # Change this so that only EC2 and Lambda can access this
        
  MyDBInstance:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - RDSSecret
      - MyDBSecurityGroup  
      # I want to pass the URL inside so I will do this
      # - ApiGatewayDeployment

    Properties:
      Engine: mysql
      EngineVersion: '8.0.35'

      DBInstanceClass: db.t3.micro 
      DeletionProtection: false 

      AllocatedStorage: 10

      DBInstanceIdentifier: MyDBInstance-2107-final-1

      DBName: temp_db 
      MasterUsername: !Sub '{{resolve:secretsmanager:${RDSSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${RDSSecret}:SecretString:password}}'

      PubliclyAccessible: true  # Allow access from anywhere
      
      DBSecurityGroups:
        - !Ref MyDBSecurityGroup  # Attach the same security group as the EC2 instance
